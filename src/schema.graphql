# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """
  JWT access token
  """
  accessToken: JWT!

  """
  JWT refresh token
  """
  refreshToken: JWT!
  user: User!
}

input BoolFilter {
  equals: Boolean
  not: BoolFilter
}

type Centre {
  city: String
  country: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  displaySequence: Int!
  displayText: String
  id: Int!
  name: String
  stateProvince: String
  streetAddress: String

  """
  Unique key associated with the object.
  """
  uniqueKey: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

enum CentreAffiliationType {
  Australia
  Hetauda
  MahendraNagar
  Nepal
  None
  Thailand
  UK
  USA
}

"""
Types of centre affiliation
"""
enum CentreAffiliation_Type {
  Australia
  Hetauda
  MahendraNagar
  Nepal
  None
  Thailand
  UK
  USA
}

input CentreRelationFilter {
  is: CentreWhereInput
  isNot: CentreWhereInput
}

input CentreWhereInput {
  AND: [CentreWhereInput!]
  NOT: [CentreWhereInput!]
  OR: [CentreWhereInput!]
  city: StringFilter
  country: StringFilter
  displaySequence: IntFilter
  displayText: StringFilter
  id: IntFilter
  members: MemberListRelationFilter
  name: StringFilter
  stateProvince: StringFilter
  streetAddress: StringFilter
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateCentreInput {
  city: String
  country: String
  displaySequence: Int!
  displayText: String!
  name: String!
  stateProvince: String
  streetAddress: String
}

input CreateGroupInput {
  description: String!
  memberIds: [Int!]!
  name: String!
  visible: Boolean!
}

input CreateMemberInput {
  active: Boolean!
  centerAffiliation: String!
  centreId: Int
  currentAddress: String
  dob: DateTime
  email: String
  firstName: String!
  gender: String
  groupIds: [Int!]
  insta: String
  isMember: Boolean!
  lastName: String!
  membershipType: String
  messenger: String
  middleName: String
  permanentAddress: String
  phonePrimary: String
  phoneSecondary: String
  photo: String
  refugeName: String
  sanghaJoinDate: DateTime
  title: String
  viber: String
}

input CreateRoleInput {
  name: String!
}

input CreateUserInput {
  memberId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input EnumCentreAffiliationTypeFilter {
  equals: CentreAffiliationType
  in: [CentreAffiliationType!]
  not: EnumCentreAffiliationTypeFilter
  notIn: [CentreAffiliationType!]
}

input EnumGenderTypeFilter {
  equals: GenderType
  in: [GenderType!]
  not: EnumGenderTypeFilter
  notIn: [GenderType!]
}

input EnumMembershipTypeFilter {
  equals: MembershipType
  in: [MembershipType!]
  not: EnumMembershipTypeFilter
  notIn: [MembershipType!]
}

input EnumTypeFilter {
  equals: Type
  in: [Type!]
  not: EnumTypeFilter
  notIn: [Type!]
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: EnumUserStatusFilter
  notIn: [UserStatus!]
}

enum GenderType {
  FEMALE
  MALE
  OTHER
  PREFER_NOT_TO_SAY
}

"""
Types of gender
"""
enum Gender_Type {
  FEMALE
  MALE
  OTHER
  PREFER_NOT_TO_SAY
}

type Group {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies who created the object.
  """
  createdBy: String
  description: String!
  id: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  isDeleted: Boolean!
  members: [Member!]!
  name: String!

  """
  Unique key associated with the object.
  """
  uniqueKey: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Identifies who made the last update to the object.
  """
  updatedBy: String
  visible: Boolean!
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  description: StringFilter
  id: IntFilter
  isDeleted: BoolFilter
  memberGroups: MemberGroupsListRelationFilter
  name: StringFilter
  uniqueKey: StringFilter
  updatedAt: DateTimeFilter
  updatedBy: StringFilter
  visible: BoolFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  password: String!
  userName: String!
}

type Member {
  active: Boolean!
  centerAffiliation: CentreAffiliation_Type!
  centre: Centre
  centreId: Int

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies who created the object.
  """
  createdBy: String
  currentAddress: String
  dob: DateTime
  email: String
  firstName: String!
  gender: Gender_Type
  groups: [Group!]!
  id: Int!
  insta: String

  """
  Identifies the date and time when the object was last updated.
  """
  isDeleted: Boolean!
  isMember: Boolean!
  lastName: String!
  membershipType: Membership_Type
  messenger: String
  middleName: String
  permanentAddress: String
  phonePrimary: String
  phoneSecondary: String
  photo: String
  refugeName: String
  sanghaJoinDate: DateTime
  title: String

  """
  Unique key associated with the object.
  """
  uniqueKey: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Identifies who made the last update to the object.
  """
  updatedBy: String
  user: User
  viber: String
}

input MemberGroupsListRelationFilter {
  every: MemberGroupsWhereInput
  none: MemberGroupsWhereInput
  some: MemberGroupsWhereInput
}

input MemberGroupsWhereInput {
  AND: [MemberGroupsWhereInput!]
  NOT: [MemberGroupsWhereInput!]
  OR: [MemberGroupsWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  group: GroupRelationFilter
  groupId: IntFilter
  member: MemberRelationFilter
  memberId: IntFilter
}

input MemberListRelationFilter {
  every: MemberWhereInput
  none: MemberWhereInput
  some: MemberWhereInput
}

input MemberRelationFilter {
  is: MemberWhereInput
  isNot: MemberWhereInput
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  active: BoolFilter
  centerAffiliation: EnumCentreAffiliationTypeFilter
  centre: CentreRelationFilter
  centreId: IntFilter
  createdAt: DateTimeFilter
  createdBy: StringFilter
  currentAddress: StringFilter
  dob: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  gender: EnumGenderTypeFilter
  id: IntFilter
  insta: StringFilter
  isDeleted: BoolFilter
  isMember: BoolFilter
  lastName: StringFilter
  memberGroups: MemberGroupsListRelationFilter
  membershipType: EnumMembershipTypeFilter
  messenger: StringFilter
  middleName: StringFilter
  permanentAddress: StringFilter
  phonePrimary: StringFilter
  phoneSecondary: StringFilter
  photo: StringFilter
  refugeName: StringFilter
  sanghaJoinDate: DateTimeFilter
  title: StringFilter
  uniqueKey: StringFilter
  updatedAt: DateTimeFilter
  updatedBy: StringFilter
  user: UserRelationFilter
  viber: StringFilter
}

enum MembershipType {
  BoardMember
  GeneralMember
  HonoraryMember
  LifeMember
}

"""
Types of membership
"""
enum Membership_Type {
  BoardMember
  GeneralMember
  HonoraryMember
  LifeMember
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createCentre(createCentreInput: CreateCentreInput!): Centre!
  createGroup(createGroupInput: CreateGroupInput!): Group!
  createMember(createMemberInput: CreateMemberInput!): Member!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createUser(createUserInput: CreateUserInput!): User!
  initiateResetPassword(
    resetPasswordInitiateInput: ResetPasswordInitiateInput!
  ): ResponseStatus!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  removeCentre(id: Int!): Centre!
  removeGroup(id: Int!): Group!
  removeMember(id: Int!): Member!
  removeRole(id: Int!): Role!
  removeUser(id: Int!): User!
  resetPassword(resetPasswordInput: ResetPasswordInput!): ResponseStatus!
  sendEmail(sendEmailInput: SendEmailInput!): ResponseStatus!
  updateCentre(updateCentreInput: UpdateCentreInput!): Centre!
  updateGroup(updateGroupInput: UpdateGroupInput!): Group!
  updateMember(updateMemberInput: UpdateMemberInput!): Member!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
}

input PasswordHistoryRelationFilter {
  is: PasswordHistoryWhereInput
  isNot: PasswordHistoryWhereInput
}

input PasswordHistoryWhereInput {
  AND: [PasswordHistoryWhereInput!]
  NOT: [PasswordHistoryWhereInput!]
  OR: [PasswordHistoryWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  id: IntFilter
  isDeleted: BoolFilter
  password: StringFilter
  uniqueKey: StringFilter
  updatedAt: DateTimeFilter
  updatedBy: StringFilter
  user: UserRelationFilter
  userId: IntFilter
}

input PasswordTokenRelationFilter {
  is: PasswordTokenWhereInput
  isNot: PasswordTokenWhereInput
}

input PasswordTokenWhereInput {
  AND: [PasswordTokenWhereInput!]
  NOT: [PasswordTokenWhereInput!]
  OR: [PasswordTokenWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  token: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type Query {
  centre(id: Int!): Centre!
  centres: [Centre!]!
  group(id: Int!): Group!
  groups: [Group!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  member(id: Int!): Member!
  members: [Member!]!
  role(where: RoleWhereInput): Role!
  roles(where: RoleWhereInput): [Role!]!
  user(id: Int!): User!
  users: [User!]!
}

input ResetPasswordInitiateInput {
  userName: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
  userId: Int!
}

type ResponseStatus {
  status: String!
}

type Role {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies who created the object.
  """
  createdBy: String
  id: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  isDeleted: Boolean!
  name: String!
  type: Role_Type!

  """
  Unique key associated with the object.
  """
  uniqueKey: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Identifies who made the last update to the object.
  """
  updatedBy: String
  users: [User!]!
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  id: IntFilter
  isDeleted: BoolFilter
  name: StringFilter
  roleType: EnumTypeFilter
  uniqueKey: StringFilter
  updatedAt: DateTimeFilter
  updatedBy: StringFilter
  users: UserListRelationFilter
}

"""
Type of the role
"""
enum Role_Type {
  DEFAULT
  SYSTEM
}

input SendEmailInput {
  content: String!
  memberEmails: [String!]!
  subject: String!
}

"""
Current status of the user within the system
"""
enum Status {
  VALIDATED
  VALIDATION_PENDING
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

type Token {
  """
  JWT access token
  """
  accessToken: JWT!

  """
  JWT refresh token
  """
  refreshToken: JWT!
}

enum Type {
  DEFAULT
  SYSTEM
}

input UpdateCentreInput {
  city: String
  country: String
  displaySequence: Int
  displayText: String
  id: Int!
  name: String
  stateProvince: String
  streetAddress: String
}

input UpdateGroupInput {
  description: String!
  id: Int!
  memberIds: [Int!]!
  name: String!
  visible: Boolean!
}

input UpdateMemberInput {
  active: Boolean!
  centerAffiliation: String!
  centreId: Int
  currentAddress: String
  dob: DateTime
  email: String
  firstName: String!
  gender: String
  groupIds: [Int!]
  id: Int!
  insta: String
  isMember: Boolean!
  lastName: String!
  membershipType: String
  messenger: String
  middleName: String
  permanentAddress: String
  phonePrimary: String
  phoneSecondary: String
  photo: String
  refugeName: String
  sanghaJoinDate: DateTime
  title: String
  viber: String
}

input UpdateRoleInput {
  id: Int!
  name: String
}

type User {
  avatar: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies who created the object.
  """
  createdBy: String
  id: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  isDeleted: Boolean!
  member: Member!
  memberId: Int!
  role: Role!
  status: Status!

  """
  Unique key associated with the object.
  """
  uniqueKey: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Identifies who made the last update to the object.
  """
  updatedBy: String
  userName: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserStatus {
  VALIDATED
  VALIDATION_PENDING
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringFilter
  createdAt: DateTimeFilter
  createdBy: StringFilter
  id: IntFilter
  isDeleted: BoolFilter
  member: MemberRelationFilter
  memberId: IntFilter
  password: StringFilter
  passwordHistory: PasswordHistoryRelationFilter
  passwordToken: PasswordTokenRelationFilter
  role: RoleRelationFilter
  roleId: IntFilter
  status: EnumUserStatusFilter
  uniqueKey: StringFilter
  updatedAt: DateTimeFilter
  updatedBy: StringFilter
  userName: StringFilter
}
