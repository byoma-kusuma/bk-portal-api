datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator nestgraphql {
    provider             = "prisma-nestjs-graphql"
    output               = "../src/@generated"
    combineScalarFilters = true
    noAtomicOperations   = true
}

enum UserStatus {
    VALIDATED
    VALIDATION_PENDING
}

model User {
    id Int @id @default(autoincrement())

    userName String  @unique
    password String
    avatar   String?

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    status          UserStatus       @default(VALIDATION_PENDING)
    passwordHistory PasswordHistory?
    role            Role             @relation(fields: [roleId], references: [id])
    roleId          Int
    member          Member           @relation(fields: [memberId], references: [id])
    memberId        Int              @unique

    passwordToken PasswordToken?
}

enum Type {
    SYSTEM
    DEFAULT
}

model Role {
    id Int @id @default(autoincrement())

    name     String @unique
    roleType Type   @default(DEFAULT)

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    users User[]
}

enum GenderType {
    MALE
    FEMALE
    OTHER
    PREFER_NOT_TO_SAY
}

enum MembershipType {
    LifeMember
    HonoraryMember
    BoardMember
    GeneralMember
}

model Member {
    id Int @id @default(autoincrement())

    email          String?
    firstName      String
    lastName       String
    middleName     String?
    title          String?
    isMember       Boolean         @default(false)
    active         Boolean         @default(true)
    phoneMobile    String?
    phoneLand      String?
    phoneOther     String?
    membershipType MembershipType?
    yearOfBirth    Int?
    gender         GenderType?
    sanghaJoinDate DateTime?
    refugeName     String?
    viber          String?
    messenger      String?
    insta          String?
    photo          String?
    note           String?

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    user User?

    memberGroup MemberGroup[]

    memberAbhisekha MemberAbhisekha[]

    memberResource MemberResource[]

    eventMember EventMember[]

    centre   Centre? @relation(fields: [centreId], references: [id])
    centreId Int?

    currentAddress Address? @relation(name: "currentAddress")

    permanentAddress Address? @relation(name: "permanentAddress")
}

model Address {
    id Int @id @default(autoincrement())

    street        String?
    city          String?
    stateProvince String?
    country       String?

    memberCurrentAddress   Member? @relation(name: "currentAddress", fields: [memberIdCurrentAddress], references: [id])
    memberIdCurrentAddress Int?    @unique

    memberPermanentAddress   Member? @relation(name: "permanentAddress", fields: [memberIdPermanentAddress], references: [id])
    memberIdPermanentAddress Int?    @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?
}

model PasswordHistory {
    id Int @id @default(autoincrement())

    password String

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique
}

model PasswordToken {
    id    Int    @id @default(autoincrement())
    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relation fields
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique
}

model Centre {
    id Int @id @default(autoincrement())

    name            String  @unique
    displayText     String
    displaySequence Int
    streetAddress   String?
    city            String?
    stateProvince   String?
    country         String?

    members Member[]
}

model Group {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    visible     Boolean

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    memberGroups MemberGroup[]
}

model MemberGroup {
    createdAt DateTime @default(now())
    createdBy String?

    // Relation fields
    member   Member @relation(fields: [memberId], references: [id])
    memberId Int
    group    Group  @relation(fields: [groupId], references: [id])
    groupId  Int

    @@id([memberId, groupId])
}

model Abhisekha {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    teacher     String

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    memberAbhisekha   MemberAbhisekha[]
    abhisekhaResource AbhisekhaResource[]
    eventAbhisekha    EventAbhisekha[]
}

model Event {
    id        Int      @id @default(autoincrement())
    name      String
    startDate DateTime
    endDate   DateTime
    notes     String?
    type      String
    isLocked  Boolean
    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    parentEvent    Event?           @relation("eventToevent_parent_event_id", fields: [parentEventId], references: [id])
    parentEventId  Int?
    childEvents    Event[]          @relation("eventToevent_parent_event_id")
    eventMember    EventMember[]
    eventResource  EventResource[]
    eventAbhisekha EventAbhisekha[]
}

model Resource {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    url         String
    type        String // image, video, document, etc
    isDeleted   Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    uniqueKey   String?  @unique
    updatedBy   String?
    createdBy   String?

    // Relation fields
    abhisekhaResource AbhisekhaResource[]
    eventResource     EventResource[]
    memberResource    MemberResource[]
}

model AbhisekhaResource {
    // Relation fields
    abhisekha   Abhisekha @relation(fields: [abhisekhaId], references: [id])
    abhisekhaId Int
    resource    Resource  @relation(fields: [resourceId], references: [id])
    resourceId  Int

    @@id([abhisekhaId, resourceId])
}

model MemberAbhisekha {
    type           String
    abhisekhaDate  DateTime
    abhisekhaPlace String

    // Relation fields
    abhisekha   Abhisekha @relation(fields: [abhisekhaId], references: [id])
    abhisekhaId Int
    member      Member    @relation(fields: [memberId], references: [id])
    memberId    Int

    @@id([memberId, abhisekhaId])
}

model EventMember {
    type        String
    hasAttended Boolean

    // Relation fields
    event    Event  @relation(fields: [eventId], references: [id])
    eventId  Int
    member   Member @relation(fields: [memberId], references: [id])
    memberId Int

    @@id([memberId, eventId])
}

model EventResource {
    type String

    // Relation fields
    event      Event    @relation(fields: [eventId], references: [id])
    eventId    Int
    resource   Resource @relation(fields: [resourceId], references: [id])
    resourceId Int

    @@id([eventId, resourceId])
}

model MemberResource {
    type String

    // Relation fields
    member     Member   @relation(fields: [memberId], references: [id])
    memberId   Int
    resource   Resource @relation(fields: [resourceId], references: [id])
    resourceId Int

    @@id([memberId, resourceId])
}

model EventAbhisekha {
    type String

    // Relation fields
    event       Event     @relation(fields: [eventId], references: [id])
    eventId     Int
    abhisekha   Abhisekha @relation(fields: [abhisekhaId], references: [id])
    abhisekhaId Int

    @@id([eventId, abhisekhaId])
}
