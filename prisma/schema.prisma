datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}
generator nestgraphql {
    provider             = "prisma-nestjs-graphql"
    output               = "../src/@generated"
    combineScalarFilters = true
    noAtomicOperations   = true
}

enum UserStatus {
    VALIDATED
    VALIDATION_PENDING
}

model User {
    id String @id @default(cuid())

    userName String  @unique
    password String
    avatar   String?

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    status          UserStatus       @default(VALIDATION_PENDING)
    passwordHistory PasswordHistory?
    role            Role             @relation(fields: [roleId], references: [id])
    roleId          String
    member          Member           @relation(fields: [memberId], references: [id])
    memberId        String           @unique

    passwordToken PasswordToken?
}

enum Type {
    SYSTEM 
    DEFAULT
}

model Role {
    id String @id @default(cuid())

    name     String @unique
    roleType Type   @default(DEFAULT)

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    users User[]
}

enum GenderType {
    MALE
    FEMALE
    OTHER
    PREFER_NOT_TO_SAY
}

enum CentreAffiliationType {
    None
    Nepal
    UK
    USA
    Australia
    Thailand
    Hetauda
    MahendraNagar
}

enum MembershipType {
    LifeMember
    HonoraryMember
    BoardMember
    GeneralMember
}

model Member {
    id String @id @default(cuid())

    email             String?
    firstName         String
    lastName          String
    middleName        String?
    title             String?
    isMember          Boolean               @default(false)
    active            Boolean               @default(true)
    phonePrimary      String?
    phoneSecondary    String?
    centerAffiliation CentreAffiliationType
    membershipType    MembershipType?
    permanentAddress  String?
    currentAddress    String?
    dob               DateTime?
    gender            GenderType?
    sanghaJoinDate    DateTime?
    refugeName        String?
    viber             String?
    messenger         String?
    insta             String?
    photo             String?
    centre            Centre?                @relation(fields: [centreId], references: [id])
    centreId          Int?

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique 
    updatedBy String?
    createdBy String?

    // Relation fields
    user User?
}

model PasswordHistory {
    id String @id @default(cuid())

    password String

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model PasswordToken {
    id String @id @default(cuid())
    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relation fields
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

}

model Centre {
    id Int @id @default(autoincrement())

    name            String @unique
    displayText     String
    displaySequence Int
    streetAddress   String
    city            String
    stateProvince   String
    country         String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    users Member[]
}
