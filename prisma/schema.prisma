datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator nestgraphql {
    provider             = "prisma-nestjs-graphql"
    output               = "../src/@generated"
    combineScalarFilters = true
    noAtomicOperations   = true
}

// uncomment the following to generate a sql dbml to view schema
// generator dbml {
//     provider = "prisma-dbml-generator"
// }

enum UserStatus {
    VALIDATED
    VALIDATION_PENDING
}

model User {
    id Int @id @default(autoincrement())

    userName String  @unique
    password String
    avatar   String?

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    status          UserStatus       @default(VALIDATION_PENDING)
    passwordHistory PasswordHistory?
    role            Role             @relation(fields: [roleId], references: [id])
    roleId          Int
    member          Member           @relation(fields: [memberId], references: [id])
    memberId        Int              @unique

    passwordToken PasswordToken?
}

enum Type {
    SYSTEM
    DEFAULT
}

model Role {
    id Int @id @default(autoincrement())

    name     String @unique
    roleType Type   @default(DEFAULT)

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    users User[]
}

enum GenderType {
    MALE
    FEMALE
    OTHER
    PREFER_NOT_TO_SAY
}

enum CentreAffiliationType {
    None
    Nepal
    UK
    USA
    Australia
    Thailand
    Hetauda
    MahendraNagar
}

enum MembershipType {
    LifeMember
    HonoraryMember
    BoardMember
    GeneralMember
}

model Member {
    id Int @id @default(autoincrement())

    email             String?
    firstName         String
    lastName          String
    middleName        String?
    title             String?
    isMember          Boolean               @default(false)
    active            Boolean               @default(true)
    phonePrimary      String?
    phoneSecondary    String?
    centerAffiliation CentreAffiliationType
    membershipType    MembershipType?
    permanentAddress  String?
    currentAddress    String?
    dob               DateTime?
    gender            GenderType?
    sanghaJoinDate    DateTime?
    refugeName        String?
    viber             String?
    messenger         String?
    insta             String?
    photo             String?
    centre            Centre?               @relation(fields: [centreId], references: [id])
    centreId          Int?

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    user            User?
    memberGroups    MemberGroups[]
    EventMember     EventMember[]
    AbhisekhaMember AbhisekhaMember[]
}

model PasswordHistory {
    id Int @id @default(autoincrement())

    password String

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique
}

model PasswordToken {
    id    Int    @id @default(autoincrement())
    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relation fields
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique
}

model Centre {
    id Int @id @default(autoincrement())

    name            String  @unique
    displayText     String
    displaySequence Int
    streetAddress   String?
    city            String?
    stateProvince   String?
    country         String?

    members Member[]
}

model Group {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    visible     Boolean
    isLocked    Boolean

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    memberGroups       MemberGroups[]
    GroupResourceProxy GroupResource[]
}

model GroupResource {
    group   Group @relation(fields: [groupId], references: [id])
    groupId Int

    resource   Resource @relation(fields: [resourceId], references: [id])
    resourceId Int

    @@id([groupId, resourceId])
}

model MemberGroups {
    createdAt DateTime @default(now())
    createdBy String?

    // Relation fields
    member   Member @relation(fields: [memberId], references: [id])
    memberId Int

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int

    @@id([memberId, groupId])
}

model Event {
    id Int @id @default(autoincrement())

    startDate DateTime
    endDate   DateTime
    isLocked  Boolean

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    parentEvent   Event?  @relation("eventToevent_parent_event_id", fields: [parentEventId], references: [id])
    parentEventId Int?
    childEvents   Event[] @relation("eventToevent_parent_event_id")

    memberRelations         EventMember[]
    eventResourceRelations  EventResource[]
    eventAbhisekhaRelations EventAbhisekha[]
    // type String // summer camp, ganachakra puja, abhisekha
}

model EventMember {
    event   Event @relation(fields: [eventId], references: [id])
    eventId Int

    member   Member @relation(fields: [memberId], references: [id])
    memberId Int

    hasAttended Boolean

    type String // peripheral, core, front row, 

    @@id([memberId, eventId])
}

model EventResource {
    event   Event @relation(fields: [eventId], references: [id])
    eventId Int

    resource   Resource @relation(fields: [resourceId], references: [id])
    resourceId Int

    type String // peripheral, core, front row, 

    @@id([eventId, resourceId])
}

model EventAbhisekha {
    event   Event @relation(fields: [eventId], references: [id])
    eventId Int

    abhisheka   Abhisekha @relation(fields: [abhishekaId], references: [id])
    abhishekaId Int

    type String // peripheral, core, front row, 

    @@id([eventId, abhishekaId])
}

model Abhisekha {
    id Int @id @default(autoincrement())

    name        String
    description String

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    // Relation fields
    memberAbhisekhaRelations   AbhisekhaMember[]
    abhisekhaResourceRelations AbhisekhaResource[]
    eventAbhisekhaRelations    EventAbhisekha[]
}

model AbhisekhaResource {
    abhisheka   Abhisekha @relation(fields: [abhishekaId], references: [id])
    abhishekaId Int

    resource   Resource @relation(fields: [resourceId], references: [id])
    resourceId Int

    type String // peripheral, core, front row, 

    @@id([abhishekaId, resourceId])
}

model AbhisekhaMember {
    abhisheka   Abhisekha @relation(fields: [abhishekaId], references: [id])
    abhishekaId Int

    member   Member @relation(fields: [memberId], references: [id])
    memberId Int

    type String // peripheral, core, front row, 

    @@id([memberId, abhishekaId])
}

model Resource {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    url         String
    type        String // image, video, document, etc

    isDeleted Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uniqueKey String?  @unique
    updatedBy String?
    createdBy String?

    abhisekhaResourceRelations AbhisekhaResource[]
    eventResourceRelations     EventResource[]
    groupResourceRelations     GroupResource[]
}
